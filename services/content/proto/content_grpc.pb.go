// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: content.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentAdminService_CreateArticle_FullMethodName   = "/content.ContentAdminService/CreateArticle"
	ContentAdminService_UpdateArticle_FullMethodName   = "/content.ContentAdminService/UpdateArticle"
	ContentAdminService_DeleteArticle_FullMethodName   = "/content.ContentAdminService/DeleteArticle"
	ContentAdminService_ListArticles_FullMethodName    = "/content.ContentAdminService/ListArticles"
	ContentAdminService_CountArticles_FullMethodName   = "/content.ContentAdminService/CountArticles"
	ContentAdminService_CreateCategory_FullMethodName  = "/content.ContentAdminService/CreateCategory"
	ContentAdminService_UpdateCategory_FullMethodName  = "/content.ContentAdminService/UpdateCategory"
	ContentAdminService_DeleteCategory_FullMethodName  = "/content.ContentAdminService/DeleteCategory"
	ContentAdminService_ListCategories_FullMethodName  = "/content.ContentAdminService/ListCategories"
	ContentAdminService_CountCategories_FullMethodName = "/content.ContentAdminService/CountCategories"
	ContentAdminService_CreateTag_FullMethodName       = "/content.ContentAdminService/CreateTag"
	ContentAdminService_UpdateTag_FullMethodName       = "/content.ContentAdminService/UpdateTag"
	ContentAdminService_DeleteTag_FullMethodName       = "/content.ContentAdminService/DeleteTag"
	ContentAdminService_ListTags_FullMethodName        = "/content.ContentAdminService/ListTags"
	ContentAdminService_CountTags_FullMethodName       = "/content.ContentAdminService/CountTags"
)

// ContentAdminServiceClient is the client API for ContentAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 内容服务
type ContentAdminServiceClient interface {
	// 文章
	CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error)
	DeleteArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListArticles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArticleListResponse, error)
	CountArticles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error)
	// 分类（全量）
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Empty, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Empty, error)
	DeleteCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryListResponse, error)
	CountCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error)
	// 标签（全量）
	CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Empty, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Empty, error)
	DeleteTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TagListResponse, error)
	CountTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error)
}

type contentAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentAdminServiceClient(cc grpc.ClientConnInterface) ContentAdminServiceClient {
	return &contentAdminServiceClient{cc}
}

func (c *contentAdminServiceClient) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_CreateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_UpdateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) DeleteArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_DeleteArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) ListArticles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArticleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleListResponse)
	err := c.cc.Invoke(ctx, ContentAdminService_ListArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) CountArticles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, ContentAdminService_CountArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) DeleteCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, ContentAdminService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) CountCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, ContentAdminService_CountCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) DeleteTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ContentAdminService_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) ListTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TagListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagListResponse)
	err := c.cc.Invoke(ctx, ContentAdminService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentAdminServiceClient) CountTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, ContentAdminService_CountTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentAdminServiceServer is the server API for ContentAdminService service.
// All implementations must embed UnimplementedContentAdminServiceServer
// for forward compatibility.
//
// 内容服务
type ContentAdminServiceServer interface {
	// 文章
	CreateArticle(context.Context, *Article) (*Empty, error)
	UpdateArticle(context.Context, *Article) (*Empty, error)
	DeleteArticle(context.Context, *Id) (*Empty, error)
	ListArticles(context.Context, *Empty) (*ArticleListResponse, error)
	CountArticles(context.Context, *Empty) (*Count, error)
	// 分类（全量）
	CreateCategory(context.Context, *Category) (*Empty, error)
	UpdateCategory(context.Context, *Category) (*Empty, error)
	DeleteCategory(context.Context, *Id) (*Empty, error)
	ListCategories(context.Context, *Empty) (*CategoryListResponse, error)
	CountCategories(context.Context, *Empty) (*Count, error)
	// 标签（全量）
	CreateTag(context.Context, *Tag) (*Empty, error)
	UpdateTag(context.Context, *Tag) (*Empty, error)
	DeleteTag(context.Context, *Id) (*Empty, error)
	ListTags(context.Context, *Empty) (*TagListResponse, error)
	CountTags(context.Context, *Empty) (*Count, error)
	mustEmbedUnimplementedContentAdminServiceServer()
}

// UnimplementedContentAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentAdminServiceServer struct{}

func (UnimplementedContentAdminServiceServer) CreateArticle(context.Context, *Article) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedContentAdminServiceServer) UpdateArticle(context.Context, *Article) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedContentAdminServiceServer) DeleteArticle(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedContentAdminServiceServer) ListArticles(context.Context, *Empty) (*ArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedContentAdminServiceServer) CountArticles(context.Context, *Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountArticles not implemented")
}
func (UnimplementedContentAdminServiceServer) CreateCategory(context.Context, *Category) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedContentAdminServiceServer) UpdateCategory(context.Context, *Category) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedContentAdminServiceServer) DeleteCategory(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedContentAdminServiceServer) ListCategories(context.Context, *Empty) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedContentAdminServiceServer) CountCategories(context.Context, *Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCategories not implemented")
}
func (UnimplementedContentAdminServiceServer) CreateTag(context.Context, *Tag) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedContentAdminServiceServer) UpdateTag(context.Context, *Tag) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedContentAdminServiceServer) DeleteTag(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedContentAdminServiceServer) ListTags(context.Context, *Empty) (*TagListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedContentAdminServiceServer) CountTags(context.Context, *Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTags not implemented")
}
func (UnimplementedContentAdminServiceServer) mustEmbedUnimplementedContentAdminServiceServer() {}
func (UnimplementedContentAdminServiceServer) testEmbeddedByValue()                             {}

// UnsafeContentAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentAdminServiceServer will
// result in compilation errors.
type UnsafeContentAdminServiceServer interface {
	mustEmbedUnimplementedContentAdminServiceServer()
}

func RegisterContentAdminServiceServer(s grpc.ServiceRegistrar, srv ContentAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentAdminService_ServiceDesc, srv)
}

func _ContentAdminService_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).CreateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).DeleteArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_ListArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).ListArticles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_CountArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).CountArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_CountArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).CountArticles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).DeleteCategory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).ListCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_CountCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).CountCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_CountCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).CountCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).CreateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).DeleteTag(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).ListTags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentAdminService_CountTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentAdminServiceServer).CountTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentAdminService_CountTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentAdminServiceServer).CountTags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentAdminService_ServiceDesc is the grpc.ServiceDesc for ContentAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.ContentAdminService",
	HandlerType: (*ContentAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _ContentAdminService_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ContentAdminService_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ContentAdminService_DeleteArticle_Handler,
		},
		{
			MethodName: "ListArticles",
			Handler:    _ContentAdminService_ListArticles_Handler,
		},
		{
			MethodName: "CountArticles",
			Handler:    _ContentAdminService_CountArticles_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _ContentAdminService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ContentAdminService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ContentAdminService_DeleteCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _ContentAdminService_ListCategories_Handler,
		},
		{
			MethodName: "CountCategories",
			Handler:    _ContentAdminService_CountCategories_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ContentAdminService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ContentAdminService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ContentAdminService_DeleteTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _ContentAdminService_ListTags_Handler,
		},
		{
			MethodName: "CountTags",
			Handler:    _ContentAdminService_CountTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
